{"version":3,"file":"main.js","sources":["../src/common/midi-manager.ts","../src/common/song-cache.ts","../src/main/main.ts"],"sourcesContent":["import easymidi from 'easymidi';\nimport { NoteSequence, PlayMidiResult, PlaybackProgress, MidiInstrument, MidiDrum } from '../types';\n\n/**\n * MIDI Manager for handling virtual MIDI devices and multi-channel support\n */\nimport { EventEmitter } from 'events';\n\nexport class MidiManager extends EventEmitter {\n  private virtualOutput: easymidi.Output | null = null;\n  private isPlaying: boolean = false;\n  private activeChannels: Set<number> = new Set();\n  private currentPlaybackTimeout: NodeJS.Timeout | null = null;\n\n  constructor() {\n    super();\n    this.initialize();\n  }\n\n  /**\n   * Initialize the MIDI manager\n   */\n  private initialize(): void {\n    try {\n      // List available MIDI outputs\n      const outputs = easymidi.getOutputs();\n      console.log('Available MIDI outputs:', outputs);\n\n      // Create a virtual MIDI output if needed\n      if (!outputs.includes('MCP MIDI Bridge')) {\n        this.virtualOutput = new easymidi.Output('MCP MIDI Bridge', true);\n        console.log('Created virtual MIDI output: MCP MIDI Bridge');\n      } else {\n        this.virtualOutput = new easymidi.Output('MCP MIDI Bridge');\n        console.log('Connected to existing virtual MIDI output: MCP MIDI Bridge');\n      }\n\n      // Notify listeners about connection\n      this.emit('midi-connection-status', { connected: true, deviceName: 'MCP MIDI Bridge' });\n    } catch (error) {\n      console.error('Failed to initialize MIDI:', error);\n      this.emit('midi-connection-status', { connected: false, error });\n    }\n  }\n\n  /**\n   * Get available MIDI outputs\n   * @returns {string[]} - Array of MIDI output names\n   */\n  getOutputs(): string[] {\n    return easymidi.getOutputs();\n  }\n\n  /**\n   * Send a program change to set the instrument for a channel\n   * @param {number} channel - MIDI channel (0-15)\n   * @param {number} program - Program number (0-127)\n   */\n  setProgramForChannel(channel: number, program: number): void {\n    if (!this.virtualOutput) return;\n\n    this.virtualOutput.send('program', {\n      channel: channel,\n      number: program\n    });\n\n    console.log(`Set channel ${channel} to program ${program}`);\n  }\n\n  /**\n   * Stop current playback\n   */\n  stopPlayback(): void {\n    this.isPlaying = false;\n    if (this.currentPlaybackTimeout) {\n      clearTimeout(this.currentPlaybackTimeout);\n      this.currentPlaybackTimeout = null;\n    }\n    \n    // Send all notes off for all channels\n    if (this.virtualOutput) {\n      for (let channel = 0; channel < 16; channel++) {\n        for (let note = 0; note < 128; note++) {\n          this.virtualOutput.send('noteoff', {\n            note: note,\n            velocity: 0,\n            channel: channel\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Play a NoteSequence through the virtual MIDI output\n   * @param {NoteSequence} noteSequence - The NoteSequence to play\n   * @param {Function} progressCallback - Callback for playback progress updates\n   * @returns {Promise<PlayMidiResult>} - Result of the playback\n   */\n  async playNoteSequence(\n    noteSequence: NoteSequence,\n    progressCallback: ((progress: PlaybackProgress) => void) | null = null\n  ): Promise<PlayMidiResult> {\n    if (!this.virtualOutput) {\n      return { success: false, error: 'MIDI output not available' };\n    }\n\n    if (this.isPlaying) {\n      return { success: false, error: 'Already playing' };\n    }\n\n    if (!noteSequence || !noteSequence.notes || noteSequence.notes.length === 0) {\n      return { success: false, error: 'Invalid or empty note sequence' };\n    }\n\n    try {\n      this.isPlaying = true;\n      this.activeChannels.clear();\n\n      // Sort notes by start time\n      const sortedNotes = [...noteSequence.notes].sort((a, b) => a.startTime - b.startTime);\n\n      // Get the total duration\n      const totalDuration = noteSequence.totalTime ||\n        Math.max(...sortedNotes.map(note => note.endTime)) || 0;\n\n      // Track active notes to ensure we send noteoff events\n      const activeNotes = new Map<number, Set<number>>();\n\n      // Set up instruments for each channel used in the sequence\n      const channelsUsed = new Set(sortedNotes.map(note => note.instrument || 0));\n\n      // Send program changes for each channel\n      for (const channel of channelsUsed) {\n        // Find the first note for this channel to determine the program\n        const firstNoteForChannel = sortedNotes.find(note => (note.instrument || 0) === channel);\n        if (firstNoteForChannel) {\n          const program = firstNoteForChannel.program || 0;\n          this.setProgramForChannel(channel, program);\n          this.activeChannels.add(channel);\n        }\n      }\n\n      // Start time for calculating relative timing\n      const startTime = Date.now();\n\n      // Process all notes and schedule them\n      for (let i = 0; i < sortedNotes.length && this.isPlaying; i++) {\n        const note = sortedNotes[i];\n        const channel = note.instrument || 0;\n        const pitch = note.pitch;\n        const velocity = note.velocity || 80;\n\n        // Calculate the time to wait before playing this note\n        const noteStartTime = note.startTime * 1000; // convert to ms\n        const noteEndTime = note.endTime * 1000; // convert to ms\n\n        // Wait until it's time to play this note\n        await new Promise<void>(resolve => {\n          const timeToWait = Math.max(0, startTime + noteStartTime - Date.now());\n          this.currentPlaybackTimeout = setTimeout(resolve, timeToWait);\n        });\n\n        if (!this.isPlaying) break; // Check if playback was stopped\n\n        // Send note on message\n        this.virtualOutput.send('noteon', {\n          note: pitch,\n          velocity: velocity,\n          channel: channel\n        });\n\n        // Add to active notes\n        if (!activeNotes.has(channel)) {\n          activeNotes.set(channel, new Set());\n        }\n        activeNotes.get(channel)?.add(pitch);\n\n        // Schedule note off\n        this.currentPlaybackTimeout = setTimeout(() => {\n          if (this.virtualOutput) {\n            this.virtualOutput.send('noteoff', {\n              note: pitch,\n              velocity: 0,\n              channel: channel\n            });\n          }\n\n          // Remove from active notes\n          if (activeNotes.has(channel)) {\n            activeNotes.get(channel)?.delete(pitch);\n          }\n        }, Math.max(0, startTime + noteEndTime - Date.now()));\n\n        // Send progress updates\n        if (progressCallback && totalDuration > 0) {\n          const progress = note.startTime / totalDuration;\n          progressCallback({\n            current: note.startTime,\n            total: totalDuration,\n            progress: progress\n          });\n        }\n      }\n\n      // Wait for the entire sequence to finish\n      if (this.isPlaying) {\n        await new Promise<void>(resolve => {\n          const timeToWait = Math.max(0, startTime + totalDuration * 1000 - Date.now()) + 100; // Add a small buffer\n          this.currentPlaybackTimeout = setTimeout(resolve, timeToWait);\n        });\n      }\n\n      // Ensure all notes are turned off\n      for (const [channel, notes] of activeNotes.entries()) {\n        for (const pitch of notes) {\n          if (this.virtualOutput) {\n            this.virtualOutput.send('noteoff', {\n              note: pitch,\n              velocity: 0,\n              channel: channel\n            });\n          }\n        }\n      }\n\n      // Send final progress update\n      if (progressCallback) {\n        progressCallback({\n          current: totalDuration,\n          total: totalDuration,\n          progress: 1.0\n        });\n      }\n\n      this.isPlaying = false;\n      return { success: true };\n\n    } catch (error) {\n      this.isPlaying = false;\n      console.error('Error playing note sequence:', error);\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error' \n      };\n    }\n  }\n\n  /**\n   * Send a control change message\n   * @param {number} channel - MIDI channel (0-15)\n   * @param {number} controller - Controller number (0-127)\n   * @param {number} value - Controller value (0-127)\n   */\n  sendControlChange(channel: number, controller: number, value: number): void {\n    if (!this.virtualOutput) return;\n\n    this.virtualOutput.send('cc', {\n      controller: controller,\n      value: value,\n      channel: channel\n    });\n  }\n\n  /**\n   * Send all notes off for a specific channel\n   * @param {number} channel - MIDI channel (0-15)\n   */\n  allNotesOff(channel: number): void {\n    if (!this.virtualOutput) return;\n\n    // Send All Notes Off (CC 123)\n    this.sendControlChange(channel, 123, 0);\n  }\n\n  /**\n   * Send all sound off for a specific channel\n   * @param {number} channel - MIDI channel (0-15)\n   */\n  allSoundOff(channel: number): void {\n    if (!this.virtualOutput) return;\n\n    // Send All Sound Off (CC 120)\n    this.sendControlChange(channel, 120, 0);\n  }\n\n  /**\n   * Reset all controllers for a specific channel\n   * @param {number} channel - MIDI channel (0-15)\n   */\n  resetAllControllers(channel: number): void {\n    if (!this.virtualOutput) return;\n\n    // Send Reset All Controllers (CC 121)\n    this.sendControlChange(channel, 121, 0);\n  }\n\n  /**\n   * Get General MIDI instrument names\n   * @returns {MidiInstrument[]} - Array of instrument information\n   */\n  getGeneralMidiInstruments(): MidiInstrument[] {\n    return [\n      // Piano\n      { name: 'Acoustic Grand Piano', family: 'Piano' },\n      { name: 'Bright Acoustic Piano', family: 'Piano' },\n      { name: 'Electric Grand Piano', family: 'Piano' },\n      { name: 'Honky-tonk Piano', family: 'Piano' },\n      { name: 'Electric Piano 1', family: 'Piano' },\n      { name: 'Electric Piano 2', family: 'Piano' },\n      { name: 'Harpsichord', family: 'Piano' },\n      { name: 'Clavi', family: 'Piano' },\n\n      // Chromatic Percussion\n      { name: 'Celesta', family: 'Chromatic Percussion' },\n      { name: 'Glockenspiel', family: 'Chromatic Percussion' },\n      { name: 'Music Box', family: 'Chromatic Percussion' },\n      { name: 'Vibraphone', family: 'Chromatic Percussion' },\n      { name: 'Marimba', family: 'Chromatic Percussion' },\n      { name: 'Xylophone', family: 'Chromatic Percussion' },\n      { name: 'Tubular Bells', family: 'Chromatic Percussion' },\n      { name: 'Dulcimer', family: 'Chromatic Percussion' },\n\n      // Organ\n      { name: 'Drawbar Organ', family: 'Organ' },\n      { name: 'Percussive Organ', family: 'Organ' },\n      { name: 'Rock Organ', family: 'Organ' },\n      { name: 'Church Organ', family: 'Organ' },\n      { name: 'Reed Organ', family: 'Organ' },\n      { name: 'Accordion', family: 'Organ' },\n      { name: 'Harmonica', family: 'Organ' },\n      { name: 'Tango Accordion', family: 'Organ' },\n\n      // Guitar\n      { name: 'Acoustic Guitar (nylon)', family: 'Guitar' },\n      { name: 'Acoustic Guitar (steel)', family: 'Guitar' },\n      { name: 'Electric Guitar (jazz)', family: 'Guitar' },\n      { name: 'Electric Guitar (clean)', family: 'Guitar' },\n      { name: 'Electric Guitar (muted)', family: 'Guitar' },\n      { name: 'Overdriven Guitar', family: 'Guitar' },\n      { name: 'Distortion Guitar', family: 'Guitar' },\n      { name: 'Guitar harmonics', family: 'Guitar' },\n\n      // Bass\n      { name: 'Acoustic Bass', family: 'Bass' },\n      { name: 'Electric Bass (finger)', family: 'Bass' },\n      { name: 'Electric Bass (pick)', family: 'Bass' },\n      { name: 'Fretless Bass', family: 'Bass' },\n      { name: 'Slap Bass 1', family: 'Bass' },\n      { name: 'Slap Bass 2', family: 'Bass' },\n      { name: 'Synth Bass 1', family: 'Bass' },\n      { name: 'Synth Bass 2', family: 'Bass' },\n\n      // Strings\n      { name: 'Violin', family: 'Strings' },\n      { name: 'Viola', family: 'Strings' },\n      { name: 'Cello', family: 'Strings' },\n      { name: 'Contrabass', family: 'Strings' },\n      { name: 'Tremolo Strings', family: 'Strings' },\n      { name: 'Pizzicato Strings', family: 'Strings' },\n      { name: 'Orchestral Harp', family: 'Strings' },\n      { name: 'Timpani', family: 'Strings' },\n\n      // Ensemble\n      { name: 'String Ensemble 1', family: 'Ensemble' },\n      { name: 'String Ensemble 2', family: 'Ensemble' },\n      { name: 'SynthStrings 1', family: 'Ensemble' },\n      { name: 'SynthStrings 2', family: 'Ensemble' },\n      { name: 'Choir Aahs', family: 'Ensemble' },\n      { name: 'Voice Oohs', family: 'Ensemble' },\n      { name: 'Synth Voice', family: 'Ensemble' },\n      { name: 'Orchestra Hit', family: 'Ensemble' },\n\n      // Brass\n      { name: 'Trumpet', family: 'Brass' },\n      { name: 'Trombone', family: 'Brass' },\n      { name: 'Tuba', family: 'Brass' },\n      { name: 'Muted Trumpet', family: 'Brass' },\n      { name: 'French Horn', family: 'Brass' },\n      { name: 'Brass Section', family: 'Brass' },\n      { name: 'SynthBrass 1', family: 'Brass' },\n      { name: 'SynthBrass 2', family: 'Brass' },\n\n      // Reed\n      { name: 'Soprano Sax', family: 'Reed' },\n      { name: 'Alto Sax', family: 'Reed' },\n      { name: 'Tenor Sax', family: 'Reed' },\n      { name: 'Baritone Sax', family: 'Reed' },\n      { name: 'Oboe', family: 'Reed' },\n      { name: 'English Horn', family: 'Reed' },\n      { name: 'Bassoon', family: 'Reed' },\n      { name: 'Clarinet', family: 'Reed' },\n\n      // Pipe\n      { name: 'Piccolo', family: 'Pipe' },\n      { name: 'Flute', family: 'Pipe' },\n      { name: 'Recorder', family: 'Pipe' },\n      { name: 'Pan Flute', family: 'Pipe' },\n      { name: 'Blown Bottle', family: 'Pipe' },\n      { name: 'Shakuhachi', family: 'Pipe' },\n      { name: 'Whistle', family: 'Pipe' },\n      { name: 'Ocarina', family: 'Pipe' },\n\n      // Synth Lead\n      { name: 'Lead 1 (square)', family: 'Synth Lead' },\n      { name: 'Lead 2 (sawtooth)', family: 'Synth Lead' },\n      { name: 'Lead 3 (calliope)', family: 'Synth Lead' },\n      { name: 'Lead 4 (chiff)', family: 'Synth Lead' },\n      { name: 'Lead 5 (charang)', family: 'Synth Lead' },\n      { name: 'Lead 6 (voice)', family: 'Synth Lead' },\n      { name: 'Lead 7 (fifths)', family: 'Synth Lead' },\n      { name: 'Lead 8 (bass + lead)', family: 'Synth Lead' },\n\n      // Synth Pad\n      { name: 'Pad 1 (new age)', family: 'Synth Pad' },\n      { name: 'Pad 2 (warm)', family: 'Synth Pad' },\n      { name: 'Pad 3 (polysynth)', family: 'Synth Pad' },\n      { name: 'Pad 4 (choir)', family: 'Synth Pad' },\n      { name: 'Pad 5 (bowed)', family: 'Synth Pad' },\n      { name: 'Pad 6 (metallic)', family: 'Synth Pad' },\n      { name: 'Pad 7 (halo)', family: 'Synth Pad' },\n      { name: 'Pad 8 (sweep)', family: 'Synth Pad' },\n\n      // Synth Effects\n      { name: 'FX 1 (rain)', family: 'Synth Effects' },\n      { name: 'FX 2 (soundtrack)', family: 'Synth Effects' },\n      { name: 'FX 3 (crystal)', family: 'Synth Effects' },\n      { name: 'FX 4 (atmosphere)', family: 'Synth Effects' },\n      { name: 'FX 5 (brightness)', family: 'Synth Effects' },\n      { name: 'FX 6 (goblins)', family: 'Synth Effects' },\n      { name: 'FX 7 (echoes)', family: 'Synth Effects' },\n      { name: 'FX 8 (sci-fi)', family: 'Synth Effects' },\n\n      // Ethnic\n      { name: 'Sitar', family: 'Ethnic' },\n      { name: 'Banjo', family: 'Ethnic' },\n      { name: 'Shamisen', family: 'Ethnic' },\n      { name: 'Koto', family: 'Ethnic' },\n      { name: 'Kalimba', family: 'Ethnic' },\n      { name: 'Bag pipe', family: 'Ethnic' },\n      { name: 'Fiddle', family: 'Ethnic' },\n      { name: 'Shanai', family: 'Ethnic' },\n\n      // Percussive\n      { name: 'Tinkle Bell', family: 'Percussive' },\n      { name: 'Agogo', family: 'Percussive' },\n      { name: 'Steel Drums', family: 'Percussive' },\n      { name: 'Woodblock', family: 'Percussive' },\n      { name: 'Taiko Drum', family: 'Percussive' },\n      { name: 'Melodic Tom', family: 'Percussive' },\n      { name: 'Synth Drum', family: 'Percussive' },\n      { name: 'Reverse Cymbal', family: 'Percussive' },\n\n      // Sound Effects\n      { name: 'Guitar Fret Noise', family: 'Sound Effects' },\n      { name: 'Breath Noise', family: 'Sound Effects' },\n      { name: 'Seashore', family: 'Sound Effects' },\n      { name: 'Bird Tweet', family: 'Sound Effects' },\n      { name: 'Telephone Ring', family: 'Sound Effects' },\n      { name: 'Helicopter', family: 'Sound Effects' },\n      { name: 'Applause', family: 'Sound Effects' },\n      { name: 'Gunshot', family: 'Sound Effects' }\n    ];\n  }\n\n  /**\n   * Get General MIDI drum names (Channel 10)\n   * @returns {MidiDrum[]} - Array of drum information\n   */\n  getGeneralMidiDrums(): MidiDrum[] {\n    return [\n      { name: 'Acoustic Bass Drum' },    // 35\n      { name: 'Bass Drum 1' },           // 36\n      { name: 'Side Stick' },            // 37\n      { name: 'Acoustic Snare' },        // 38\n      { name: 'Hand Clap' },             // 39\n      { name: 'Electric Snare' },        // 40\n      { name: 'Low Floor Tom' },         // 41\n      { name: 'Closed Hi Hat' },         // 42\n      { name: 'High Floor Tom' },        // 43\n      { name: 'Pedal Hi-Hat' },          // 44\n      { name: 'Low Tom' },               // 45\n      { name: 'Open Hi-Hat' },           // 46\n      { name: 'Low-Mid Tom' },           // 47\n      { name: 'Hi Mid Tom' },            // 48\n      { name: 'Crash Cymbal 1' },        // 49\n      { name: 'High Tom' },              // 50\n      { name: 'Ride Cymbal 1' },         // 51\n      { name: 'Chinese Cymbal' },        // 52\n      { name: 'Ride Bell' },             // 53\n      { name: 'Tambourine' },            // 54\n      { name: 'Splash Cymbal' },         // 55\n      { name: 'Cowbell' },               // 56\n      { name: 'Crash Cymbal 2' },        // 57\n      { name: 'Vibraslap' },             // 58\n      { name: 'Ride Cymbal 2' },         // 59\n      { name: 'Hi Bongo' },              // 60\n      { name: 'Low Bongo' },             // 61\n      { name: 'Mute Hi Conga' },         // 62\n      { name: 'Open Hi Conga' },         // 63\n      { name: 'Low Conga' },             // 64\n      { name: 'High Timbale' },          // 65\n      { name: 'Low Timbale' },           // 66\n      { name: 'High Agogo' },            // 67\n      { name: 'Low Agogo' },             // 68\n      { name: 'Cabasa' },                // 69\n      { name: 'Maracas' },               // 70\n      { name: 'Short Whistle' },         // 71\n      { name: 'Long Whistle' },          // 72\n      { name: 'Short Guiro' },           // 73\n      { name: 'Long Guiro' },            // 74\n      { name: 'Claves' },                // 75\n      { name: 'Hi Wood Block' },         // 76\n      { name: 'Low Wood Block' },        // 77\n      { name: 'Mute Cuica' },            // 78\n      { name: 'Open Cuica' },            // 79\n      { name: 'Mute Triangle' },         // 80\n      { name: 'Open Triangle' }          // 81\n    ];\n  }\n\n  /**\n   * Close the MIDI output\n   */\n  close(): void {\n    if (this.virtualOutput) {\n      this.virtualOutput.close();\n      this.virtualOutput = null;\n    }\n  }\n}","import fs from 'fs';\nimport path from 'path';\nimport { NoteSequence, SaveSongResult, SongInfo } from '../types';\n\n/**\n * SongCache manages the storage and retrieval of NoteSequence JSON files\n */\nexport class SongCache {\n  private cacheDir: string;\n\n  /**\n   * Create a new SongCache\n   * @param {string} cacheDir - Directory to store song cache files\n   */\n  constructor(cacheDir: string) {\n    this.cacheDir = cacheDir;\n    this.ensureCacheDirectory();\n  }\n  \n  /**\n   * Ensure the cache directory exists\n   */\n  private ensureCacheDirectory(): void {\n    if (!fs.existsSync(this.cacheDir)) {\n      fs.mkdirSync(this.cacheDir, { recursive: true });\n    }\n  }\n  \n  /**\n   * Save a NoteSequence to the cache\n   * @param {NoteSequence} noteSequence - The NoteSequence to save\n   * @returns {SaveSongResult} - Information about the saved file\n   */\n  saveSong(noteSequence: NoteSequence): SaveSongResult {\n    try {\n      // Basic validation\n      if (!noteSequence || !noteSequence.notes) {\n        throw new Error('Invalid NoteSequence format');\n      }\n      \n      // Generate a filename with timestamp\n      const timestamp = Date.now();\n      const filename = `song_${timestamp}.json`;\n      const filepath = path.join(this.cacheDir, filename);\n      \n      // Save the file\n      fs.writeFileSync(filepath, JSON.stringify(noteSequence, null, 2));\n      \n      return {\n        success: true,\n        filepath,\n        timestamp,\n        filename\n      };\n    } catch (error) {\n      console.error('Error saving song:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n  \n  /**\n   * Get the most recent song from the cache\n   * @returns {NoteSequence|null} - The most recent NoteSequence or null if none found\n   */\n  getLatestSong(): NoteSequence | null {\n    try {\n      // Find all song files and sort by name (which includes timestamp)\n      const files = fs.readdirSync(this.cacheDir)\n        .filter(file => file.startsWith('song_') && file.endsWith('.json'))\n        .sort()\n        .reverse();\n      \n      if (files.length === 0) {\n        return null;\n      }\n      \n      // Read the most recent file\n      const latestFile = files[0];\n      const filepath = path.join(this.cacheDir, latestFile);\n      const content = fs.readFileSync(filepath, 'utf8');\n      \n      return JSON.parse(content) as NoteSequence;\n    } catch (error) {\n      console.error('Error getting latest song:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get a list of all songs in the cache\n   * @returns {SongInfo[]} - Array of song information objects\n   */\n  getSongList(): SongInfo[] {\n    try {\n      const files = fs.readdirSync(this.cacheDir)\n        .filter(file => file.startsWith('song_') && file.endsWith('.json'))\n        .sort()\n        .reverse();\n\n      return files.map(file => {\n        const filepath = path.join(this.cacheDir, file);\n        const stats = fs.statSync(filepath);\n        \n        // Extract timestamp from filename\n        const timestamp = parseInt(file.replace('song_', '').replace('.json', ''), 10);\n        \n        return {\n          filename: file,\n          filepath,\n          timestamp,\n          created: stats.birthtime,\n          size: stats.size\n        };\n      });\n    } catch (error) {\n      console.error('Error getting song list:', error);\n      return [];\n    }\n  }\n  \n  /**\n   * Get a specific song by filename\n   * @param {string} filename - The filename of the song to retrieve\n   * @returns {NoteSequence|null} - The NoteSequence or null if not found\n   */\n  getSong(filename: string): NoteSequence | null {\n    try {\n      const filepath = path.join(this.cacheDir, filename);\n      \n      if (!fs.existsSync(filepath)) {\n        return null;\n      }\n      \n      const content = fs.readFileSync(filepath, 'utf8');\n      return JSON.parse(content) as NoteSequence;\n    } catch (error) {\n      console.error(`Error getting song ${filename}:`, error);\n      return null;\n    }\n  }\n  \n  /**\n   * Delete a song from the cache\n   * @param {string} filename - The filename of the song to delete\n   * @returns {boolean} - Whether the deletion was successful\n   */\n  deleteSong(filename: string): boolean {\n    try {\n      const filepath = path.join(this.cacheDir, filename);\n      \n      if (!fs.existsSync(filepath)) {\n        return false;\n      }\n      \n      fs.unlinkSync(filepath);\n      return true;\n    } catch (error) {\n      console.error(`Error deleting song ${filename}:`, error);\n      return false;\n    }\n  }\n}","import { app, BrowserWindow, ipcMain, Menu, MenuItemConstructorOptions } from 'electron';\nimport path from 'path';\nimport fs from 'fs';\nimport express from 'express';\nimport cors from 'cors';\nimport { ChildProcess } from 'child_process';\n\nimport { MidiManager } from '../common/midi-manager';\nimport { SongCache } from '../common/song-cache';\nimport { startPythonServer } from '../common/python-server';\nimport { \n  NoteSequence, \n  AppConfig, \n  SongInfo, \n  MidiFileResult, \n  ConfigUpdateResult, \n  McpServerStatus,\n  PlayMidiResult,\n  SaveSongResult\n} from '../types';\n\n// Global variables\nlet mainWindow: BrowserWindow | null = null;\nlet midiManager: MidiManager;\nlet songCache: SongCache;\nlet mcpServer: express.Application;\nlet mcpServerInstance: any = null;\nlet pythonServer: { process: ChildProcess; url: string } | null = null;\n\n// Configuration\nlet config: AppConfig = {\n  mcpPort: 8002,\n  pythonPort: 5000,\n  lastUsedSong: null\n};\n\nconst isDev = process.env.NODE_ENV === 'development';\n\n// Cleanup function to properly close all servers and resources\nfunction cleanup(): void {\n  console.log('Performing cleanup...');\n\n  // Close MCP server\n  if (mcpServerInstance) {\n    console.log('Closing MCP server...');\n    mcpServerInstance.close(() => {\n      console.log('MCP server closed');\n    });\n    mcpServerInstance = null;\n  }\n\n  // Close Python server\n  if (pythonServer?.process) {\n    console.log('Terminating Python server...');\n    pythonServer.process.kill('SIGTERM');\n    pythonServer = null;\n  }\n\n  // Close MIDI manager\n  if (midiManager) {\n    console.log('Closing MIDI manager...');\n    midiManager.close();\n  }\n\n  // Close main window\n  if (mainWindow && !mainWindow.isDestroyed()) {\n    console.log('Closing main window...');\n    mainWindow.close();\n    mainWindow = null;\n  }\n}\n\n// Handle app termination\napp.on('before-quit', (event) => {\n  console.log('App is about to quit');\n  cleanup();\n});\n\n// Handle all windows closed\napp.on('window-all-closed', () => {\n  console.log('All windows closed');\n  cleanup();\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\n// Handle app termination signals\nprocess.on('SIGTERM', () => {\n  console.log('Received SIGTERM');\n  cleanup();\n  app.quit();\n});\n\nprocess.on('SIGINT', () => {\n  console.log('Received SIGINT');\n  cleanup();\n  app.quit();\n});\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught Exception:', error);\n  cleanup();\n  app.quit();\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  cleanup();\n  app.quit();\n});\n\nfunction createWindow(): void {\n  // Create the browser window\n  mainWindow = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: path.join(__dirname, 'preload.js'),\n    },\n  });\n\n  // Load the app\n  if (isDev) {\n    mainWindow.loadURL('http://localhost:5173');\n    mainWindow.webContents.openDevTools();\n  } else {\n    mainWindow.loadFile(path.join(__dirname, '../dist/index.html'));\n  }\n\n  mainWindow.on('closed', () => {\n    mainWindow = null;\n  });\n}\n\n// Initialize core components\nfunction initializeComponents(): void {\n  try {\n    // Initialize MIDI manager\n    midiManager = new MidiManager();\n    console.log('MIDI Manager initialized');\n\n    // Listen for MIDI connection status events\n    midiManager.on('midi-connection-status', (status) => {\n      if (mainWindow) {\n        mainWindow.webContents.send('midi-connection-status', status);\n      }\n    });\n\n    // Initialize song cache\n    const cacheDir = path.join(app.getPath('userData'), 'song_cache');\n    songCache = new SongCache(cacheDir);\n    console.log('Song Cache initialized');\n\n    // Start Python server (disabled by default, enable if needed)\n    if (isDev) {\n      // Commented out to avoid error if script missing\n      // try {\n      //   pythonServer = startPythonServer(true);\n      //   console.log('Python server started');\n      // } catch (error) {\n      //   console.error('Failed to start Python server:', error);\n      // }\n    }\n\n    // Initialize MCP server\n    initializeMcpServer();\n  } catch (error) {\n    console.error('Failed to initialize components:', error);\n  }\n}\n\n// Initialize MCP API server\nfunction initializeMcpServer(): void {\n  mcpServer = express();\n  mcpServer.use(cors());\n  mcpServer.use(express.json({ limit: '10mb' }));\n\n  // Health check endpoint\n  mcpServer.get('/health', (req, res) => {\n    res.json({ status: 'ok', timestamp: new Date().toISOString() });\n  });\n\n  // Receive NoteSequence from LLM\n  mcpServer.post('/song', (req, res) => {\n    try {\n      const noteSequence: NoteSequence = req.body;\n      \n      // Validate the note sequence\n      if (!noteSequence || !noteSequence.notes) {\n        return res.status(400).json({ error: 'Invalid NoteSequence format' });\n      }\n\n      // Save to cache\n      const saveResult = songCache.saveSong(noteSequence);\n      \n      if (saveResult.success) {\n        // Notify the renderer process\n        if (mainWindow) {\n          mainWindow.webContents.send('song-updated', noteSequence);\n        }\n\n        res.json({\n          success: true,\n          message: 'Song received and cached',\n          filename: saveResult.filename,\n          timestamp: saveResult.timestamp\n        });\n      } else {\n        res.status(500).json({ error: saveResult.error });\n      }\n    } catch (error) {\n      console.error('Error processing song:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Get current song\n  mcpServer.get('/song', (req, res) => {\n    try {\n      const latestSong = songCache.getLatestSong();\n      if (latestSong) {\n        res.json(latestSong);\n      } else {\n        res.status(404).json({ error: 'No songs found' });\n      }\n    } catch (error) {\n      console.error('Error getting song:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Get song list\n  mcpServer.get('/songs', (req, res) => {\n    try {\n      const songs = songCache.getSongList();\n      res.json(songs);\n    } catch (error) {\n      console.error('Error getting song list:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Play song endpoint\n  mcpServer.post('/play', async (req, res) => {\n    try {\n      const noteSequence: NoteSequence = req.body;\n      \n      if (!noteSequence || !noteSequence.notes) {\n        return res.status(400).json({ error: 'Invalid NoteSequence format' });\n      }\n\n      const result = await midiManager.playNoteSequence(noteSequence);\n      res.json(result);\n    } catch (error) {\n      console.error('Error playing song:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // Start the server\n  try {\n    mcpServerInstance = mcpServer.listen(config.mcpPort, () => {\n      console.log(`MCP API server running on port ${config.mcpPort}`);\n    });\n\n    mcpServerInstance.on('error', (error: any) => {\n      if (error.code === 'EADDRINUSE') {\n        console.error(`Port ${config.mcpPort} is already in use. Trying alternative port...`);\n        // Try alternative port\n        const altPort = config.mcpPort + 1;\n        mcpServerInstance = mcpServer.listen(altPort, () => {\n          config.mcpPort = altPort;\n          console.log(`MCP API server running on alternative port ${altPort}`);\n          // Save the new port to config\n          saveConfig();\n        });\n      } else {\n        console.error('Failed to start MCP server:', error);\n      }\n    });\n  } catch (error) {\n    console.error('Failed to start MCP server:', error);\n  }\n}\n\n// Create application menu\nfunction createMenu(): void {\n  const template: MenuItemConstructorOptions[] = [\n    {\n      label: 'File',\n      submenu: [\n        {\n          label: 'Import MIDI',\n          click: () => {\n            // TODO: Implement MIDI import dialog\n          }\n        },\n        { type: 'separator' },\n        { role: 'quit' }\n      ]\n    },\n    {\n      label: 'Edit',\n      submenu: [\n        { role: 'undo' },\n        { role: 'redo' },\n        { type: 'separator' },\n        { role: 'cut' },\n        { role: 'copy' },\n        { role: 'paste' }\n      ]\n    },\n    {\n      label: 'View',\n      submenu: [\n        { role: 'reload' },\n        { role: 'forceReload' },\n        { role: 'toggleDevTools' },\n        { type: 'separator' },\n        { role: 'resetZoom' },\n        { role: 'zoomIn' },\n        { role: 'zoomOut' },\n        { type: 'separator' },\n        { role: 'togglefullscreen' }\n      ]\n    },\n    {\n      label: 'Window',\n      submenu: [\n        { role: 'minimize' },\n        { role: 'close' }\n      ]\n    },\n    {\n      label: 'Help',\n      submenu: [\n        {\n          label: 'About MCP MIDI Bridge',\n          click: () => {\n            if (mainWindow) {\n              mainWindow.webContents.send('show-about');\n            }\n          }\n        }\n      ]\n    }\n  ];\n\n  const menu = Menu.buildFromTemplate(template);\n  Menu.setApplicationMenu(menu);\n}\n\n// IPC handlers\nfunction setupIpcHandlers(): void {\n  // Get latest song\n  ipcMain.handle('get-latest-song', async (): Promise<NoteSequence | null> => {\n    try {\n      return songCache.getLatestSong();\n    } catch (error) {\n      console.error('Error getting latest song:', error);\n      return null;\n    }\n  });\n\n  // Get song list\n  ipcMain.handle('get-song-list', async (): Promise<SongInfo[]> => {\n    try {\n      return songCache.getSongList();\n    } catch (error) {\n      console.error('Error getting song list:', error);\n      return [];\n    }\n  });\n\n  // Play MIDI\n  ipcMain.handle('play-midi', async (event, noteSequence: NoteSequence): Promise<PlayMidiResult> => {\n    try {\n      return await midiManager.playNoteSequence(noteSequence, (progress) => {\n        if (mainWindow) {\n          mainWindow.webContents.send('playback-progress', progress);\n        }\n      });\n    } catch (error) {\n      console.error('Error playing MIDI:', error);\n      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };\n    }\n  });\n\n  // Stop MIDI\n  ipcMain.handle('stop-midi', async (): Promise<void> => {\n    try {\n      midiManager.stopPlayback();\n    } catch (error) {\n      console.error('Error stopping MIDI:', error);\n    }\n  });\n\n  // Import MIDI file\n  ipcMain.handle('import-midi-file', async (event, filePath: string): Promise<MidiFileResult> => {\n    try {\n      // TODO: Implement MIDI file import using a library like midi-file\n      return { success: false, error: 'MIDI import not yet implemented' };\n    } catch (error) {\n      console.error('Error importing MIDI file:', error);\n      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };\n    }\n  });\n\n  // Update configuration\n  ipcMain.handle('update-config', async (event, newConfig: AppConfig): Promise<ConfigUpdateResult> => {\n    try {\n      config = { ...config, ...newConfig };\n\n      // Save config to file\n      const configPath = path.join(app.getPath('userData'), 'config.json');\n      fs.writeFileSync(configPath, JSON.stringify(config, null, 2));\n\n      // Restart MCP server if port changed\n      if (mcpServerInstance && newConfig.mcpPort !== config.mcpPort) {\n        mcpServerInstance.close();\n        config.mcpPort = newConfig.mcpPort;\n        initializeMcpServer();\n      }\n\n      return { success: true };\n    } catch (error) {\n      console.error('Error updating config:', error);\n      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };\n    }\n  });\n\n  // Get MCP server status\n  ipcMain.handle('get-mcp-status', async (): Promise<McpServerStatus> => {\n    return {\n      running: mcpServerInstance !== null,\n      port: config.mcpPort\n    };\n  });\n\n  // Get current song (alias for get-latest-song)\n  ipcMain.handle('get-current-song', async (): Promise<NoteSequence | null> => {\n    try {\n      return songCache.getLatestSong();\n    } catch (error) {\n      console.error('Error getting current song:', error);\n      return null;\n    }\n  });\n\n  // Get configuration\n  ipcMain.handle('get-config', async (): Promise<AppConfig> => {\n    return config;\n  });\n\n  // Get MIDI outputs\n  ipcMain.handle('get-midi-outputs', async (): Promise<string[]> => {\n    try {\n      return midiManager.getOutputs();\n    } catch (error) {\n      console.error('Error getting MIDI outputs:', error);\n      return [];\n    }\n  });\n\n  // Get MIDI instruments\n  ipcMain.handle('get-midi-instruments', async (): Promise<Record<number, { name: string, family: string }>> => {\n    try {\n      const instruments = midiManager.getGeneralMidiInstruments();\n      const result: Record<number, { name: string, family: string }> = {};\n      instruments.forEach((instrument, index) => {\n        result[index] = { name: instrument.name, family: 'General MIDI' };\n      });\n      return result;\n    } catch (error) {\n      console.error('Error getting MIDI instruments:', error);\n      return {};\n    }\n  });\n\n  // Get MIDI drums\n  ipcMain.handle('get-midi-drums', async (): Promise<Record<number, { name: string }>> => {\n    try {\n      const drums = midiManager.getGeneralMidiDrums();\n      const result: Record<number, { name: string }> = {};\n      drums.forEach((drum, index) => {\n        result[index + 35] = { name: drum.name }; // GM drums start at note 35\n      });\n      return result;\n    } catch (error) {\n      console.error('Error getting MIDI drums:', error);\n      return {};\n    }\n  });\n}\n\n// Load configuration\nfunction loadConfig(): void {\n  try {\n    const configPath = path.join(app.getPath('userData'), 'config.json');\n    if (fs.existsSync(configPath)) {\n      const configData = fs.readFileSync(configPath, 'utf8');\n      config = { ...config, ...JSON.parse(configData) };\n    }\n  } catch (error) {\n    console.error('Error loading config:', error);\n  }\n}\n\n// Save configuration\nfunction saveConfig(): void {\n  try {\n    const configPath = path.join(app.getPath('userData'), 'config.json');\n    fs.writeFileSync(configPath, JSON.stringify(config, null, 2));\n    console.log('Configuration saved');\n  } catch (error) {\n    console.error('Error saving config:', error);\n  }\n}\n\n// App event handlers\napp.whenReady().then(() => {\n  loadConfig();\n  initializeComponents();\n  createWindow();\n  createMenu();\n  setupIpcHandlers();\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow();\n    }\n  });\n});\n\napp.on('window-all-closed', () => {\n  // Clean up\n  if (mcpServerInstance) {\n    mcpServerInstance.close();\n  }\n\n  if (pythonServer && pythonServer.process) {\n    try {\n      pythonServer.process.kill();\n    } catch (error) {\n      console.warn('Failed to kill Python server process:', error);\n    }\n  }\n\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('before-quit', () => {\n  // Clean up resources\n  if (mcpServerInstance) {\n    mcpServerInstance.close();\n  }\n\n  if (pythonServer && pythonServer.process) {\n    try {\n      pythonServer.process.kill();\n    } catch (error) {\n      console.warn('Failed to kill Python server process:', error);\n    }\n  }\n});"],"names":["EventEmitter","_a","app","BrowserWindow","Menu","ipcMain"],"mappings":"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"}